[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "bech32m"
dynamic = ["version"]
description = 'Encoding/decoding Bech32 and Bech32m'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["bech32", "bech32m", "bitcoin", "blockchain"]
authors = [
    { name = "Denis Otkidach", email = "denis.otkidach@gmail.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Topic :: Security :: Cryptography",
]
dependencies = []

[project.urls]
Source = "https://github.com/ods/bech32m"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
python = "3.9"
dependencies = [
    "black>=23.1.0",
    "coverage[toml]>=6.5",
    "mypy>=1.3.0",
    "pytest",
    "pytest-cov",
    "ruff>=0.0.243",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:--cov tests}"
typing = "mypy {args:bech32m tests}"
check = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
    "typing",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.black]
target-version = ["py39"]
line-length = 100

[tool.ruff]
target-version = "py39"
line-length = 100

# For the reference, check https://beta.ruff.rs/docs/rules/
select = [
    "F",  # pyflakes
    "E", "W",  # pycodestyle
    "I",  # isort
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",  # flake8-bugbear
    "A001",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",  # flake8-pytest-style
    "RET501", "RET502", "RET503",  # flake8-return
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "PGH",  # pygrep-hooks
    "PLC", "PLE",  # Pylint
    "RUF",  # Ruff-specific
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101"]

[tool.ruff.isort]
known-first-party = ["bech32m"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "csv"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers"]
testpaths = ["tests"]
filterwarnings = [
    "error",
]

[tool.coverage.run]
source_pkgs = ["bech32m", "tests"]
branch = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
